def mavenCommand = '$MVN_CMD -Duser.home=/var/maven -B clean test site site:stage -DstagingDirectory=$(pwd)/target/staging1/$(basename $(dirname $JOB_NAME)) install -Dsurefire.timeout=1000' 

pipeline {
  options {
    buildDiscarder(logRotator(numToKeepStr: '5', daysToKeepStr: '10'))
    disableConcurrentBuilds()
  }
  triggers {
    pollSCM('H H/4 * * *')
    snapshotDependencies()
    cron('H H H H/2 *')
  }
  agent none
  stages {
    stage('Build') {
      matrix {
        agent {
          docker {
            image 'maven:3-${JAVAVERSION}'
            args '-v maven-repo-matrix:/var/maven/.m2 -e MAVEN_CONFIG=/var/maven/.m2'
          }
        }
        axes {
          axis {
            name 'JAVAVERSION'
            values 'openjdk-8', 'openjdk-11', 'openjdk-16', 'openjdk-17'
            // 'openjdk-15', - is not working testing argouml-core-model-mdr
          }
          axis {
            name 'COMPILESOURCE'
            values '6', '7'   // , '8'
          }
        }
        excludes {
          exclude {
            axis {
              name 'JAVAVERSION'
              values 'openjdk-15', 'openjdk-16', 'openjdk-17'
            }
            axis {
              name 'COMPILESOURCE'
              values '6'
            }
          }
        }
        stages {
          stage('doit') {
            steps {
              waitForNetwork()
              timeout(time: 1, unit: 'HOURS') {
                checkout scm

                // Patch to get another set of artifacts.
                // This relies on the order of the lines with groupId and artifactId.
                sh "find . -name target -type d -prune -o -name pom.xml -type f -print | while read pom; do sed '\$!N;s,<groupId>\\(org.argouml</groupId>.*\\n.*<artifactId>[^j]\\),<groupId>${JAVAVERSION}-${COMPILESOURCE}.\\1,;P;D' -i \$pom; done"
                
                sh "find . -name target -type d -prune -o -name pom.xml -type f -print | while read pom; do sed 's,\\(<compileSource>1.\\)6\\(</compileSource>\\),\\1${COMPILESOURCE}\\2,' -i \$pom; done"
              }
              waitForNetwork()
              timeout(time: 3, unit: 'HOURS') {
                withMaven(mavenSettingsConfig: 'github') {
                  sh "${mavenCommand} || ${mavenCommand} || ${mavenCommand}"
                }
              }
              sh 'git checkout .'
            }
          }
        }
        post {
          always {
            cleanWs cleanWhenAborted: false,
                    cleanWhenFailure: false,
                    cleanWhenNotBuilt: false,
                    cleanWhenUnstable: false,
                    deleteDirs: true,
                    notFailBuild: true,
                    patterns: [[pattern: 'target/**', type: 'INCLUDE']]
          }
        }
      }
    }
  }
}

def waitForNetwork() {
  waitUntil {
    return sh(returnStatus: true, script: 'curl https://github.com/robots.txt > /dev/null') == 0
  }
}
