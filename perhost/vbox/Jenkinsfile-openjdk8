pipeline {
  options {
    buildDiscarder(logRotator(numToKeepStr: '50', daysToKeepStr: '100'))
    disableConcurrentBuilds()
  }
  triggers {
    pollSCM('@hourly')
    snapshotDependencies()
    cron('@monthly')
  }
  agent {
    docker {
      image 'maven:3-openjdk-8'
      args '-v maven-repo-openjdk:/var/maven/.m2 -e MAVEN_CONFIG=/var/maven/.m2'
    }
  }
  stages {
    stage('checkout') {
      steps {
        waitForNetwork()
        timeout(time: 1, unit: 'HOURS') {
          checkout scm

          // Patch to get another set of artifacts.
          sh 'find . -name target -type d -prune -o -name pom.xml -type f -print | while read pom; do sed "s,<groupId>org.argouml</groupId>,<groupId>openjdk8.org.argouml</groupId>," -i $pom; done'
        }
      }
    }
    stage('site') {
      steps {
        waitForNetwork()
        timeout(time: 3, unit: 'HOURS') {
          withMaven(mavenSettingsConfig: 'github') {
            sh '$MVN_CMD -Duser.home=/var/maven -B clean'
            sh '$MVN_CMD -Duser.home=/var/maven -B test -Dmaven.test.failure.ignore=true site site:stage -DstagingDirectory=$(pwd)/target/staging1/$(basename $(dirname $JOB_NAME))'
          }
        }
      }
    }
    stage('install') {
      steps {
        waitForNetwork()
        timeout(time: 3, unit: 'HOURS') {
          withMaven(options: [junitPublisher(disabled: true,
                                             healthScaleFactor: 0.0),
                              jacocoPublisher(disabled: true)]) {
            sh '$MVN_CMD -Duser.home=/var/maven -B install'
          }
        }
      }
    }
    stage('revert') {
      steps {
        sh 'git checkout .'
      }
    }
  }
  post {
    always {
      cleanWs cleanWhenAborted: false,
              cleanWhenFailure: false,
              cleanWhenNotBuilt: false,
              cleanWhenUnstable: false,
              deleteDirs: true,
              notFailBuild: true,
              patterns: [[pattern: 'target/**', type: 'INCLUDE']]
    }
  }
}

def waitForNetwork() {
  waitUntil {
    return sh(returnStatus: true, script: 'curl https://github.com/robots.txt > /dev/null') == 0
  }
}
